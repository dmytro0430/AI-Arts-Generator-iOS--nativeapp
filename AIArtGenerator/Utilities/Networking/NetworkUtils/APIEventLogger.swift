//
//  APIEventLogger.swift
//  AIArtGenerator
//

import Foundation
import  AIgenerator

class APIEventLogger: EventMonitor {
    
    let queue = DispatchQueue(label: "myNetworkLogger")
        
    func requestDidFinish(_ request: Request) {
        let requestLog = """
        - - - - - - - - - - - - 游댮 API Request Start 游댮 - - - - - - - - - -
        游깷 URL: \(request.request?.url?.absoluteString ?? "")
        游댢 Method: \(request.request?.httpMethod ?? "")
        游닍 Headers: \(request.request?.allHTTPHeaderFields ?? [:])
        游댐 Authorization: \(request.request?.headers["Authorization"] ?? "")
        游늯 Body: \(request.request?.httpBody?.toPrettyPrintedString ?? "")
        - - - - - - - - - - - - 游댮 API Request End 游댮 - - - - - - - - - -
        """
        
        print(requestLog)
    }
    
    func request<Value>(_ request: DataRequest, didParseResponse response: DataResponse<Value, AFError>) {
        let responseLog = """
        - - - - - - - - - - - - 游릭 API Response Start 游릭 - - - - - - - - - -
        游깷 URL: \(request.request?.url?.absoluteString ?? "")
        游늵 StatusCode: \(response.response?.statusCode ?? 0)
        游닍 Data: \(response.data?.toPrettyPrintedString ?? "")
        - - - - - - - - - - - - 游릭 API Response End 游릭 - - - - - - - - - -
        """
        
        print(responseLog)
    }
}

extension Data {
    var toPrettyPrintedString: String? {
        guard let object = try? JSONSerialization.jsonObject(with: self, options: []),
              let data = try? JSONSerialization.data(withJSONObject: object, options: [.prettyPrinted]),
              let prettyPrintedString = NSString(data: data, encoding: String.Encoding.utf8.rawValue) else { return nil }
        return prettyPrintedString as String
    }
}
